# Generated by Django 4.1.7 on 2023-03-23 14:47

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import puppetshowapp.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Actor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("actor_hash", models.UUIDField(default=uuid.uuid4)),
                (
                    "speaking_animation",
                    models.ImageField(upload_to=puppetshowapp.models.user_actor_path),
                ),
                (
                    "not_speaking_animation",
                    models.ImageField(upload_to=puppetshowapp.models.user_actor_path),
                ),
                (
                    "sleeping_animation",
                    models.ImageField(blank=True, null=True, upload_to=""),
                ),
                (
                    "connection_animation",
                    models.ImageField(blank=True, null=True, upload_to=""),
                ),
                (
                    "disconnect_animation",
                    models.ImageField(blank=True, null=True, upload_to=""),
                ),
            ],
            options={
                "db_table": "charactor_actors",
            },
        ),
        migrations.CreateModel(
            name="DiscordData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_snowflake", models.CharField(max_length=20, unique=True)),
                ("user_username", models.CharField(max_length=100)),
                (
                    "profile_picture",
                    models.ImageField(upload_to=puppetshowapp.models.user_pfp_path),
                ),
            ],
            options={
                "db_table": "discord_user_data",
            },
        ),
        migrations.CreateModel(
            name="Scene",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scene_name", models.CharField(max_length=30)),
                (
                    "scene_author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="puppetshowapp.discorddata",
                    ),
                ),
            ],
            options={
                "db_table": "scenes",
            },
        ),
        migrations.CreateModel(
            name="Emotion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("emotion_hash", models.CharField(max_length=200)),
                (
                    "emotion_name",
                    models.CharField(
                        blank=True, default="Neutral", max_length=15, null=True
                    ),
                ),
                (
                    "speaking_animation",
                    models.ImageField(upload_to=puppetshowapp.models.user_pfp_path),
                ),
                (
                    "not_speaking_animation",
                    models.ImageField(upload_to=puppetshowapp.models.user_pfp_path),
                ),
                (
                    "sleeping_animation",
                    models.ImageField(blank=True, null=True, upload_to=""),
                ),
                (
                    "connection_animation",
                    models.ImageField(blank=True, null=True, upload_to=""),
                ),
                (
                    "disconnect_animation",
                    models.ImageField(blank=True, null=True, upload_to=""),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="puppetshowapp.actor",
                    ),
                ),
            ],
            options={
                "db_table": "character_emotions",
            },
        ),
        migrations.AddField(
            model_name="actor",
            name="actor_base_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="puppetshowapp.discorddata",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="scene",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="puppetshowapp.scene"
            ),
        ),
        migrations.CreateModel(
            name="DiscordPointingUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email_address"
                    ),
                ),
                (
                    "discord_data",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="puppetshowapp.discorddata",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
    ]
